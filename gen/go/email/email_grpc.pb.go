// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/email-service/email.proto

package emailv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EmailService_NotifyComicUploaded_FullMethodName  = "/email.EmailService/NotifyComicUploaded"
	EmailService_NotifyChapterUpdated_FullMethodName = "/email.EmailService/NotifyChapterUpdated"
)

// EmailServiceClient is the client API for EmailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailServiceClient interface {
	NotifyComicUploaded(ctx context.Context, in *NotifyComicUploadedRequest, opts ...grpc.CallOption) (*NotifyComicUploadedResponse, error)
	NotifyChapterUpdated(ctx context.Context, in *NotifyChapterUpdatedRequest, opts ...grpc.CallOption) (*NotifyChapterUpdatedResponse, error)
}

type emailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailServiceClient(cc grpc.ClientConnInterface) EmailServiceClient {
	return &emailServiceClient{cc}
}

func (c *emailServiceClient) NotifyComicUploaded(ctx context.Context, in *NotifyComicUploadedRequest, opts ...grpc.CallOption) (*NotifyComicUploadedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotifyComicUploadedResponse)
	err := c.cc.Invoke(ctx, EmailService_NotifyComicUploaded_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) NotifyChapterUpdated(ctx context.Context, in *NotifyChapterUpdatedRequest, opts ...grpc.CallOption) (*NotifyChapterUpdatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotifyChapterUpdatedResponse)
	err := c.cc.Invoke(ctx, EmailService_NotifyChapterUpdated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailServiceServer is the server API for EmailService service.
// All implementations must embed UnimplementedEmailServiceServer
// for forward compatibility.
type EmailServiceServer interface {
	NotifyComicUploaded(context.Context, *NotifyComicUploadedRequest) (*NotifyComicUploadedResponse, error)
	NotifyChapterUpdated(context.Context, *NotifyChapterUpdatedRequest) (*NotifyChapterUpdatedResponse, error)
	mustEmbedUnimplementedEmailServiceServer()
}

// UnimplementedEmailServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmailServiceServer struct{}

func (UnimplementedEmailServiceServer) NotifyComicUploaded(context.Context, *NotifyComicUploadedRequest) (*NotifyComicUploadedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyComicUploaded not implemented")
}
func (UnimplementedEmailServiceServer) NotifyChapterUpdated(context.Context, *NotifyChapterUpdatedRequest) (*NotifyChapterUpdatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyChapterUpdated not implemented")
}
func (UnimplementedEmailServiceServer) mustEmbedUnimplementedEmailServiceServer() {}
func (UnimplementedEmailServiceServer) testEmbeddedByValue()                      {}

// UnsafeEmailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailServiceServer will
// result in compilation errors.
type UnsafeEmailServiceServer interface {
	mustEmbedUnimplementedEmailServiceServer()
}

func RegisterEmailServiceServer(s grpc.ServiceRegistrar, srv EmailServiceServer) {
	// If the following call pancis, it indicates UnimplementedEmailServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmailService_ServiceDesc, srv)
}

func _EmailService_NotifyComicUploaded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyComicUploadedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).NotifyComicUploaded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_NotifyComicUploaded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).NotifyComicUploaded(ctx, req.(*NotifyComicUploadedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_NotifyChapterUpdated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyChapterUpdatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).NotifyChapterUpdated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmailService_NotifyChapterUpdated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).NotifyChapterUpdated(ctx, req.(*NotifyChapterUpdatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailService_ServiceDesc is the grpc.ServiceDesc for EmailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "email.EmailService",
	HandlerType: (*EmailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyComicUploaded",
			Handler:    _EmailService_NotifyComicUploaded_Handler,
		},
		{
			MethodName: "NotifyChapterUpdated",
			Handler:    _EmailService_NotifyChapterUpdated_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/email-service/email.proto",
}
